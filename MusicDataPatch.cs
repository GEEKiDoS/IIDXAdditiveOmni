using System.Runtime.InteropServices;
using System.Text;
using YamlDotNet.Serialization;

namespace IIDXAdditiveOmni;

[YamlSerializable]
public record MusicEntry
{
    public string title { get; set; }
    public string englishTitle { get; set; }
    public string genre { get; set; }
    public string artist { get; set; }
    public MusicTextures textures { get; set; }
    public int fontId { get; set; }
    public short version { get; set; }
    public List<byte> spLevels { get; set; }
    public List<byte> dpLevels { get; set; }
    public List<byte> idents { get; set; }
    public short otherFolder { get; set; }
    public short bemaniFolder { get; set; }
    public short splitTableDiff { get; set; }
    public int volume { get; set; }
    public short bgaDelay { get; set; }
    public string bgaFile { get; set; }
}

[YamlSerializable]
public record MusicTextures
{
    public int title { get; set; }
    public int artist { get; set; }
    public int genre { get; set; }
    public int load { get; set; }
    public int list { get; set; }
}

internal unsafe class MusicDataPatch
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate int AvsRead(nint file, byte* target, long size);
    internal static AvsRead OriginalRead;
    internal static int ReadHook(nint file, byte* target, long size)
    {
        var result = OriginalRead!(file, target, size);
        if (result == 0)
            return result;

        if (target[0] == 'I' && target[1] == 'I' && target[2] == 'D' && target[3] == 'X' && size == 0x300000)
        {
            try
            {
                PatchMusicData(target, size);
            }
            catch (Exception e)
            {
                var ex = e;

                while (ex != null)
                {
                    Hook.LogLine(ex.GetType().Name);
                    Hook.LogLine(ex.Message);
                    Hook.LogLine(ex.StackTrace);
                    Hook.LogLine("");

                    if (ex.InnerException == e)
                        break;

                    ex = ex.InnerException;
                }

                
            }
        }

        return result;
    }

    private static Dictionary<int, MusicEntry> LoadMusicData()
    {
        var aotContext = new StaticContext();
        var deserializer = new StaticDeserializerBuilder(aotContext)
            .Build();

        using var reader = File.OpenText("onmi_data.yml");
        return deserializer.Deserialize<Dictionary<int, MusicEntry>>(reader);
    }

    private static void PatchMusicData(byte* target, long size)
    {
        var data = LoadMusicData();

        var shiftjis = Encoding.GetEncoding("Shift-JIS");

        using var stream = new UnmanagedMemoryStream(target, size, size, FileAccess.ReadWrite);
        using var bw = new BinaryWriter(stream, shiftjis, true);
        using var br = new BinaryReader(stream, shiftjis, true);

        br.BaseStream.Seek(4, SeekOrigin.Begin);
        var version = br.ReadInt32();
        var count = br.ReadInt16();
        var maxEntries = br.ReadInt16();

        Hook.LogLine($"version: {version}");
        Hook.LogLine($"count: {count}");
        Hook.LogLine($"maxEntries: {maxEntries}");

        var dictOffset = 0x10;
        var songsOffset = 0x10 + maxEntries * 2;
        var entrySize = 0x52c;

        foreach (var entry in data)
        {
            if (count >= maxEntries)
            {
                Hook.LogLine("music limit reaches");
                break;
            }

            Hook.LogLine($"{entry.Key} - {entry.Value.title}");

            br.BaseStream.Seek(dictOffset + 2 * entry.Key, SeekOrigin.Begin);
            var index = br.ReadInt16();

            if (index is -1 or 0)
            {
                Hook.LogLine("Creating new entry");

                bw.Seek(dictOffset + 2 * entry.Key, SeekOrigin.Begin);
                bw.Write(count);

                index = count;
                count++;
            }
            else
            {
                Hook.LogLine("Overriding existing entry");
            }

            var music = entry.Value;
            var baseOffset = songsOffset + entrySize * index;

            bw.Seek(baseOffset, SeekOrigin.Begin);
            bw.Write(shiftjis.GetBytes(music.title));

            bw.Seek(baseOffset + 0x40, SeekOrigin.Begin);
            bw.Write(shiftjis.GetBytes(music.englishTitle));

            bw.Seek(baseOffset + 0x80, SeekOrigin.Begin);
            bw.Write(shiftjis.GetBytes(music.genre));

            bw.Seek(baseOffset + 0xC0, SeekOrigin.Begin);
            bw.Write(shiftjis.GetBytes(music.artist));

            bw.Seek(baseOffset + 0x100, SeekOrigin.Begin);
            bw.Write(music.textures.title);
            bw.Write(music.textures.artist);
            bw.Write(music.textures.genre);
            bw.Write(music.textures.load);
            bw.Write(music.textures.list);

            bw.Write(music.fontId);
            bw.Write(music.version);

            bw.Write(music.otherFolder);
            bw.Write(music.bemaniFolder);
            bw.Write(music.splitTableDiff);

            if (music.spLevels.Count != 5)
                Hook.LogLine("spLevels != 5");

            if (music.dpLevels.Count != 5)
                Hook.LogLine("dpLevels != 5");

            foreach (var level in music.spLevels)
                bw.Write(level);

            foreach (var level in music.dpLevels)
                bw.Write(level);

            bw.Write(rawData);

            bw.Write(entry.Key);
            bw.Write(music.volume);

            if (music.idents.Count != 10)
                Hook.LogLine("idents != 10");

            foreach (var ident in music.idents)
                bw.Write(ident);

            bw.Write(music.bgaDelay);
            bw.Write(shiftjis.GetBytes(music.bgaFile));
        }

        bw.Seek(8, SeekOrigin.Begin);
        bw.Write(count);
    }

    static byte[] rawData = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];

}
